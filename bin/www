#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('mini-twitch:server');
const http = require('http');
const path = require('path');

const config = require('../src/config');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 */

let server;
const sockets = [];

function startServer() {
  return new Promise((resolve, reject) => {
    const app = require('../src/server/app')();
    app.set('port', normalizePort(process.env.PORT || '3000'));

    server = http.createServer(app);
    server.listen(app.get('port'));
    server.on('error', onError);
    server.on('connection', (socket) => {
      debug('Add socket', sockets.length + 1);
      sockets.push(socket);
    });
    server.on('listening', () => resolve());
  });
}

function clearCache() {
  // clean the cache
  Object.keys(require.cache).forEach((id) => {
    delete require.cache[id];
  });
}

function stopServer() {
  return new Promise((resolve, reject) => {
    while (sockets.length) {
      const socket = sockets.pop();
      if (socket.destroyed === false) {
        socket.destroy();
      }
    }

    server.close(() => {
      resolve();
    });
  });
}

function restart() {
  return stopServer().then(clearCache).then(startServer);
}

startServer().then(() => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
});

if (!config.isProd) {
  const chokidar = require('chokidar');
  const hmr = require('../src/server/hmr');

  const bundler = hmr.startWds();
  chokidar.watch(path.join(__dirname, '../src/server')).on('all', (event, at) => {
    if (event === 'change') {
      console.log('Restarting server...');
      restart().then(() => {
        bundler.sockWrite(bundler.sockets, 'content-changed');
      });
    }
  });
}
